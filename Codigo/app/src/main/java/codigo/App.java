/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package codigo;

import java.io.IOException;
import java.util.Scanner;

public class App {
    
    public static void main(String args[]) {

        long startTime, endTime;

        Scanner scanner = new Scanner(System.in);
        System.out.println("Digite o número de vértices:");
        int V = scanner.nextInt();
        System.out.println("Digite o número de arestas:");
        int E = scanner.nextInt();

        Grafo g = new Grafo(V);
        g.generateRandomGraph(E);

        System.out.println("Grafo gerado com " + V + " vértices e " + E + " arestas.");

        // Salvando o grafo em um arquivo
        try {
            g.saveGraphToFile("graph.txt");
            System.out.println("Grafo salvo em 'graph.txt'.");
        } catch (IOException e) {
            System.out.println("Erro ao salvar o grafo: " + e.getMessage());
        }

        // Carregando o grafo de um arquivo
        Grafo g2 = new Grafo(V);
        try {
            g2.loadGraphFromFile("graph.txt");
            System.out.println("Grafo carregado de 'graph.txt'.");
        } catch (IOException e) {
            System.out.println("Erro ao carregar o grafo: " + e.getMessage());
        }

        startTime = System.nanoTime();
        g.naiveSearch();
        endTime = System.nanoTime();
        System.out.println("Tempo gasto para a busca naive: " + (endTime - startTime) + " nanosegundos");

        startTime = System.nanoTime();
        g.warshall();
        endTime = System.nanoTime();
        System.out.println("Tempo gasto para o algoritmo de Warshall: " + (endTime - startTime) + " nanosegundos");

        startTime = System.nanoTime();
        g.findBaseAndAntiBase();
        endTime = System.nanoTime();
        System.out.println("Tempo gasto para encontrar a base e antibase: " + (endTime - startTime) + " nanosegundos");
    }
}

    
