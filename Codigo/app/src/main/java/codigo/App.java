/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package codigo;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Scanner;

public class App {


    private static final String[] grafos = {"grafo_100.txt", "grafo_1000.txt", "grafo_10000.txt", "grafo100000.txt"};
    public static void main(String args[]) {


        long startTime, endTime;

        for(int v = 100; v != 1000000; v = 10*v) {

            Grafo g = new Grafo(v);
            int a = (v*100);
            g.generateRandomGraph(a);
    
            System.out.println("Grafo gerado com " + v + " v√©rtices e " + a + " arestas.");

            // Salvando o grafo em um arquivo
            try {
                g.salvarGrafoParaArquivo("grafo_"+v+".txt");
                System.out.println("Grafo salvo em "+ "grafo_"+v+".txt");
            } catch (IOException e) {
                System.out.println("Erro ao salvar o grafo: " + e.getMessage());
            } 

            // Carregando o grafo de um arquivo
            Grafo g1 = new Grafo(v);
            try {
                g1.carregarGrafoDeArquivo("grafo_"+v+".txt");
                System.out.println("Grafo carregado de "+ "grafo_"+v+".txt");
            } catch (IOException e) {
                System.out.println("Erro ao carregar o grafo: " + e.getMessage());
            }

            startTime = System.nanoTime();
            g1.warshall();
            endTime = System.nanoTime();
            System.out.println("Tempo gasto para o algoritmo de Warshall: " + (endTime - startTime) + " nanosegundos");

            startTime = System.nanoTime();
            g1.AcharBaseEAntiBase();
            endTime = System.nanoTime();
            System.out.println("Tempo gasto para encontrar a base e antibase: " + (endTime - startTime) + " nanosegundos");
    
            Grafo g2 = new Grafo(v);
            try {
                g2.carregarGrafoDeArquivo("grafo_"+v+".txt");
                System.out.println("Grafo carregado de "+ "grafo_"+v+".txt");
            } catch (IOException e) {
                System.out.println("Erro ao carregar o grafo: " + e.getMessage());
            }

            startTime = System.nanoTime();
            g2.naiveSearch();
            endTime = System.nanoTime();
            System.out.println("Tempo gasto para a busca naive: " + (endTime - startTime) + " nanosegundos");

            startTime = System.nanoTime();
            g2.AcharBaseEAntiBase();
            endTime = System.nanoTime();
            System.out.println("Tempo gasto para encontrar a base e antibase: " + (endTime - startTime) + " nanosegundos");
    
            }
    }
}